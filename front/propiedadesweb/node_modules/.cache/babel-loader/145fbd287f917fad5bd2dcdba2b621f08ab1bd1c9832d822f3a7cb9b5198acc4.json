{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { FilterService } from '@primevue/core/api';\nimport { UniqueComponentId, ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport { focus, isAndroid, getFirstFocusableElement, getLastFocusableElement, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice, isVisible, getFocusableElements, findSingle } from '@primeuix/utils/dom';\nimport { resolveFieldData, isPrintableCharacter, isNotEmpty, equals, findLastIndex } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport BlankIcon from '@primevue/icons/blank';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport TimesIcon from '@primevue/icons/times';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SelectStyle from 'primevue/select/style';\nimport { resolveComponent, resolveDirective, openBlock, createElementBlock, mergeProps, renderSlot, createTextVNode, toDisplayString, normalizeClass, createBlock, resolveDynamicComponent, createCommentVNode, createElementVNode, createVNode, withCtx, Transition, normalizeProps, createSlots, Fragment, renderList, withDirectives } from 'vue';\nvar script$1 = {\n  name: 'BaseSelect',\n  \"extends\": BaseComponent,\n  props: {\n    modelValue: null,\n    options: Array,\n    optionLabel: [String, Function],\n    optionValue: [String, Function],\n    optionDisabled: [String, Function],\n    optionGroupLabel: [String, Function],\n    optionGroupChildren: [String, Function],\n    scrollHeight: {\n      type: String,\n      \"default\": '14rem'\n    },\n    filter: Boolean,\n    filterPlaceholder: String,\n    filterLocale: String,\n    filterMatchMode: {\n      type: String,\n      \"default\": 'contains'\n    },\n    filterFields: {\n      type: Array,\n      \"default\": null\n    },\n    editable: Boolean,\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    variant: {\n      type: String,\n      \"default\": null\n    },\n    invalid: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    dataKey: null,\n    showClear: {\n      type: Boolean,\n      \"default\": false\n    },\n    fluid: {\n      type: Boolean,\n      \"default\": false\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    labelId: {\n      type: String,\n      \"default\": null\n    },\n    labelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    labelStyle: {\n      type: Object,\n      \"default\": null\n    },\n    panelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    overlayStyle: {\n      type: Object,\n      \"default\": null\n    },\n    overlayClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    panelStyle: {\n      type: Object,\n      \"default\": null\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    clearIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    dropdownIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    filterIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    resetFilterOnHide: {\n      type: Boolean,\n      \"default\": false\n    },\n    resetFilterOnClear: {\n      type: Boolean,\n      \"default\": false\n    },\n    virtualScrollerOptions: {\n      type: Object,\n      \"default\": null\n    },\n    autoOptionFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    autoFilterFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    selectOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    focusOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    highlightOnSelect: {\n      type: Boolean,\n      \"default\": true\n    },\n    checkmark: {\n      type: Boolean,\n      \"default\": false\n    },\n    filterMessage: {\n      type: String,\n      \"default\": null\n    },\n    selectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySelectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptyFilterMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptyMessage: {\n      type: String,\n      \"default\": null\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: SelectStyle,\n  provide: function provide() {\n    return {\n      $pcSelect: this,\n      $parentInstance: this\n    };\n  }\n};\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar script = {\n  name: 'Select',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:modelValue', 'change', 'focus', 'blur', 'before-show', 'before-hide', 'show', 'hide', 'filter'],\n  outsideClickListener: null,\n  scrollHandler: null,\n  resizeListener: null,\n  labelClickListener: null,\n  overlay: null,\n  list: null,\n  virtualScroller: null,\n  searchTimeout: null,\n  searchValue: null,\n  isModelValueChanged: false,\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      clicked: false,\n      focused: false,\n      focusedOptionIndex: -1,\n      filterValue: null,\n      overlayVisible: false\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    },\n    modelValue: function modelValue() {\n      this.isModelValueChanged = true;\n    },\n    options: function options() {\n      this.autoUpdateModel();\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.id || UniqueComponentId();\n    this.autoUpdateModel();\n    this.bindLabelClickListener();\n  },\n  updated: function updated() {\n    if (this.overlayVisible && this.isModelValueChanged) {\n      this.scrollInView(this.findSelectedOptionIndex());\n    }\n    this.isModelValueChanged = false;\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    this.unbindLabelClickListener();\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.overlay) {\n      ZIndex.clear(this.overlay);\n      this.overlay = null;\n    }\n  },\n  methods: {\n    getOptionIndex: function getOptionIndex(index, fn) {\n      return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n    },\n    getOptionValue: function getOptionValue(option) {\n      return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n    },\n    getOptionRenderKey: function getOptionRenderKey(option, index) {\n      return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n    },\n    getPTItemOptions: function getPTItemOptions(option, itemOptions, index, key) {\n      return this.ptm(key, {\n        context: {\n          option: option,\n          index: index,\n          selected: this.isSelected(option),\n          focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n          disabled: this.isOptionDisabled(option)\n        }\n      });\n    },\n    isOptionDisabled: function isOptionDisabled(option) {\n      return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n    },\n    isOptionGroup: function isOptionGroup(option) {\n      return this.optionGroupLabel && option.optionGroup && option.group;\n    },\n    getOptionGroupLabel: function getOptionGroupLabel(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupLabel);\n    },\n    getOptionGroupChildren: function getOptionGroupChildren(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupChildren);\n    },\n    getAriaPosInset: function getAriaPosInset(index) {\n      var _this = this;\n      return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter(function (option) {\n        return _this.isOptionGroup(option);\n      }).length : index) + 1;\n    },\n    show: function show(isFocus) {\n      this.$emit('before-show');\n      this.overlayVisible = true;\n      this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex();\n      isFocus && focus(this.$refs.focusInput);\n    },\n    hide: function hide(isFocus) {\n      var _this2 = this;\n      var _hide = function _hide() {\n        _this2.$emit('before-hide');\n        _this2.overlayVisible = false;\n        _this2.clicked = false;\n        _this2.focusedOptionIndex = -1;\n        _this2.searchValue = '';\n        _this2.resetFilterOnHide && (_this2.filterValue = null);\n        isFocus && focus(_this2.$refs.focusInput);\n      };\n      setTimeout(function () {\n        _hide();\n      }, 0); // For ScreenReaders\n    },\n    onFocus: function onFocus(event) {\n      if (this.disabled) {\n        // For ScreenReaders\n        return;\n      }\n      this.focused = true;\n      if (this.overlayVisible) {\n        this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex();\n        this.scrollInView(this.focusedOptionIndex);\n      }\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      this.focused = false;\n      this.focusedOptionIndex = -1;\n      this.searchValue = '';\n      this.$emit('blur', event);\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (this.disabled || isAndroid()) {\n        event.preventDefault();\n        return;\n      }\n      var metaKey = event.metaKey || event.ctrlKey;\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event, this.editable);\n          break;\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          this.onArrowLeftKey(event, this.editable);\n          break;\n        case 'Home':\n          this.onHomeKey(event, this.editable);\n          break;\n        case 'End':\n          this.onEndKey(event, this.editable);\n          break;\n        case 'PageDown':\n          this.onPageDownKey(event);\n          break;\n        case 'PageUp':\n          this.onPageUpKey(event);\n          break;\n        case 'Space':\n          this.onSpaceKey(event, this.editable);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n        case 'Backspace':\n          this.onBackspaceKey(event, this.editable);\n          break;\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          //NOOP\n          break;\n        default:\n          if (!metaKey && isPrintableCharacter(event.key)) {\n            !this.overlayVisible && this.show();\n            !this.editable && this.searchOptions(event, event.key);\n          }\n          break;\n      }\n      this.clicked = false;\n    },\n    onEditableInput: function onEditableInput(event) {\n      var value = event.target.value;\n      this.searchValue = '';\n      var matched = this.searchOptions(event, value);\n      !matched && (this.focusedOptionIndex = -1);\n      this.updateModel(event, value);\n      !this.overlayVisible && isNotEmpty(value) && this.show();\n    },\n    onContainerClick: function onContainerClick(event) {\n      if (this.disabled || this.loading) {\n        return;\n      }\n      if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n        return;\n      } else if (!this.overlay || !this.overlay.contains(event.target)) {\n        this.overlayVisible ? this.hide(true) : this.show(true);\n      }\n      this.clicked = true;\n    },\n    onClearClick: function onClearClick(event) {\n      this.updateModel(event, null);\n      this.resetFilterOnClear && (this.filterValue = null);\n    },\n    onFirstHiddenFocus: function onFirstHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      focus(focusableEl);\n    },\n    onLastHiddenFocus: function onLastHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      focus(focusableEl);\n    },\n    onOptionSelect: function onOptionSelect(event, option) {\n      var isHide = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var value = this.getOptionValue(option);\n      this.updateModel(event, value);\n      isHide && this.hide(true);\n    },\n    onOptionMouseMove: function onOptionMouseMove(event, index) {\n      if (this.focusOnHover) {\n        this.changeFocusedOptionIndex(event, index);\n      }\n    },\n    onFilterChange: function onFilterChange(event) {\n      var value = event.target.value;\n      this.filterValue = value;\n      this.focusedOptionIndex = -1;\n      this.$emit('filter', {\n        originalEvent: event,\n        value: value\n      });\n      !this.virtualScrollerDisabled && this.virtualScroller.scrollToIndex(0);\n    },\n    onFilterKeyDown: function onFilterKeyDown(event) {\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event, true);\n          break;\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          this.onArrowLeftKey(event, true);\n          break;\n        case 'Home':\n          this.onHomeKey(event, true);\n          break;\n        case 'End':\n          this.onEndKey(event, true);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event, true);\n          break;\n      }\n    },\n    onFilterBlur: function onFilterBlur() {\n      this.focusedOptionIndex = -1;\n    },\n    onFilterUpdated: function onFilterUpdated() {\n      if (this.overlayVisible) {\n        this.alignOverlay();\n      }\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.$el\n      });\n    },\n    onOverlayKeyDown: function onOverlayKeyDown(event) {\n      switch (event.code) {\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      if (!this.overlayVisible) {\n        this.show();\n        this.editable && this.changeFocusedOptionIndex(event, this.findSelectedOptionIndex());\n      } else {\n        var optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n        this.changeFocusedOptionIndex(event, optionIndex);\n      }\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (event.altKey && !pressedInInputText) {\n        if (this.focusedOptionIndex !== -1) {\n          this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n        }\n        this.overlayVisible && this.hide();\n        event.preventDefault();\n      } else {\n        var optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n        this.changeFocusedOptionIndex(event, optionIndex);\n        !this.overlayVisible && this.show();\n        event.preventDefault();\n      }\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      pressedInInputText && (this.focusedOptionIndex = -1);\n    },\n    onHomeKey: function onHomeKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        var target = event.currentTarget;\n        if (event.shiftKey) {\n          target.setSelectionRange(0, event.target.selectionStart);\n        } else {\n          target.setSelectionRange(0, 0);\n          this.focusedOptionIndex = -1;\n        }\n      } else {\n        this.changeFocusedOptionIndex(event, this.findFirstOptionIndex());\n        !this.overlayVisible && this.show();\n      }\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        var target = event.currentTarget;\n        if (event.shiftKey) {\n          target.setSelectionRange(event.target.selectionStart, target.value.length);\n        } else {\n          var len = target.value.length;\n          target.setSelectionRange(len, len);\n          this.focusedOptionIndex = -1;\n        }\n      } else {\n        this.changeFocusedOptionIndex(event, this.findLastOptionIndex());\n        !this.overlayVisible && this.show();\n      }\n      event.preventDefault();\n    },\n    onPageUpKey: function onPageUpKey(event) {\n      this.scrollInView(0);\n      event.preventDefault();\n    },\n    onPageDownKey: function onPageDownKey(event) {\n      this.scrollInView(this.visibleOptions.length - 1);\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (!this.overlayVisible) {\n        this.focusedOptionIndex = -1; // reset\n        this.onArrowDownKey(event);\n      } else {\n        if (this.focusedOptionIndex !== -1) {\n          this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n        }\n        this.hide();\n      }\n      event.preventDefault();\n    },\n    onSpaceKey: function onSpaceKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      !pressedInInputText && this.onEnterKey(event);\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      this.overlayVisible && this.hide(true);\n      event.preventDefault();\n      event.stopPropagation(); //@todo will be changed next versionss\n    },\n    onTabKey: function onTabKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!pressedInInputText) {\n        if (this.overlayVisible && this.hasFocusableElements()) {\n          focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n          event.preventDefault();\n        } else {\n          if (this.focusedOptionIndex !== -1) {\n            this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n          }\n          this.overlayVisible && this.hide(this.filter);\n        }\n      }\n    },\n    onBackspaceKey: function onBackspaceKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        !this.overlayVisible && this.show();\n      }\n    },\n    onOverlayEnter: function onOverlayEnter(el) {\n      ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      addStyle(el, {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      });\n      this.alignOverlay();\n      this.scrollInView();\n      this.autoFilterFocus && focus(this.$refs.filterInput.$el);\n    },\n    onOverlayAfterEnter: function onOverlayAfterEnter() {\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.$emit('show');\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.$emit('hide');\n      this.overlay = null;\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndex.clear(el);\n    },\n    alignOverlay: function alignOverlay() {\n      if (this.appendTo === 'self') {\n        relativePosition(this.overlay, this.$el);\n      } else {\n        this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n        absolutePosition(this.overlay, this.$el);\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this3 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this3.overlayVisible && _this3.overlay && !_this3.$el.contains(event.target) && !_this3.overlay.contains(event.target)) {\n            _this3.hide();\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this4 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, function () {\n          if (_this4.overlayVisible) {\n            _this4.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this5 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this5.overlayVisible && !isTouchDevice()) {\n            _this5.hide();\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    bindLabelClickListener: function bindLabelClickListener() {\n      var _this6 = this;\n      if (!this.editable && !this.labelClickListener) {\n        var label = document.querySelector(\"label[for=\\\"\".concat(this.inputId, \"\\\"]\"));\n        if (label && isVisible(label)) {\n          this.labelClickListener = function () {\n            focus(_this6.$refs.focusInput);\n          };\n          label.addEventListener('click', this.labelClickListener);\n        }\n      }\n    },\n    unbindLabelClickListener: function unbindLabelClickListener() {\n      if (this.labelClickListener) {\n        var label = document.querySelector(\"label[for=\\\"\".concat(this.inputId, \"\\\"]\"));\n        if (label && isVisible(label)) {\n          label.removeEventListener('click', this.labelClickListener);\n        }\n      }\n    },\n    hasFocusableElements: function hasFocusableElements() {\n      return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n    },\n    isOptionMatched: function isOptionMatched(option) {\n      var _this$getOptionLabel;\n      return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && ((_this$getOptionLabel = this.getOptionLabel(option)) === null || _this$getOptionLabel === void 0 ? void 0 : _this$getOptionLabel.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)));\n    },\n    isValidOption: function isValidOption(option) {\n      return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n    },\n    isValidSelectedOption: function isValidSelectedOption(option) {\n      return this.isValidOption(option) && this.isSelected(option);\n    },\n    isSelected: function isSelected(option) {\n      return this.isValidOption(option) && equals(this.modelValue, this.getOptionValue(option), this.equalityKey);\n    },\n    findFirstOptionIndex: function findFirstOptionIndex() {\n      var _this7 = this;\n      return this.visibleOptions.findIndex(function (option) {\n        return _this7.isValidOption(option);\n      });\n    },\n    findLastOptionIndex: function findLastOptionIndex() {\n      var _this8 = this;\n      return findLastIndex(this.visibleOptions, function (option) {\n        return _this8.isValidOption(option);\n      });\n    },\n    findNextOptionIndex: function findNextOptionIndex(index) {\n      var _this9 = this;\n      var matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (option) {\n        return _this9.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n    },\n    findPrevOptionIndex: function findPrevOptionIndex(index) {\n      var _this10 = this;\n      var matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), function (option) {\n        return _this10.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    },\n    findSelectedOptionIndex: function findSelectedOptionIndex() {\n      var _this11 = this;\n      return this.hasSelectedOption ? this.visibleOptions.findIndex(function (option) {\n        return _this11.isValidSelectedOption(option);\n      }) : -1;\n    },\n    findFirstFocusedOptionIndex: function findFirstFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n    },\n    findLastFocusedOptionIndex: function findLastFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n    },\n    searchOptions: function searchOptions(event, _char) {\n      var _this12 = this;\n      this.searchValue = (this.searchValue || '') + _char;\n      var optionIndex = -1;\n      var matched = false;\n      if (isNotEmpty(this.searchValue)) {\n        if (this.focusedOptionIndex !== -1) {\n          optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex(function (option) {\n            return _this12.isOptionMatched(option);\n          });\n          optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex(function (option) {\n            return _this12.isOptionMatched(option);\n          }) : optionIndex + this.focusedOptionIndex;\n        } else {\n          optionIndex = this.visibleOptions.findIndex(function (option) {\n            return _this12.isOptionMatched(option);\n          });\n        }\n        if (optionIndex !== -1) {\n          matched = true;\n        }\n        if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n          optionIndex = this.findFirstFocusedOptionIndex();\n        }\n        if (optionIndex !== -1) {\n          this.changeFocusedOptionIndex(event, optionIndex);\n        }\n      }\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n      this.searchTimeout = setTimeout(function () {\n        _this12.searchValue = '';\n        _this12.searchTimeout = null;\n      }, 500);\n      return matched;\n    },\n    changeFocusedOptionIndex: function changeFocusedOptionIndex(event, index) {\n      if (this.focusedOptionIndex !== index) {\n        this.focusedOptionIndex = index;\n        this.scrollInView();\n        if (this.selectOnFocus) {\n          this.onOptionSelect(event, this.visibleOptions[index], false);\n        }\n      }\n    },\n    scrollInView: function scrollInView() {\n      var _this13 = this;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      this.$nextTick(function () {\n        var id = index !== -1 ? \"\".concat(_this13.id, \"_\").concat(index) : _this13.focusedOptionId;\n        var element = findSingle(_this13.list, \"li[id=\\\"\".concat(id, \"\\\"]\"));\n        if (element) {\n          element.scrollIntoView && element.scrollIntoView({\n            block: 'nearest',\n            inline: 'start'\n          });\n        } else if (!_this13.virtualScrollerDisabled) {\n          _this13.virtualScroller && _this13.virtualScroller.scrollToIndex(index !== -1 ? index : _this13.focusedOptionIndex);\n        }\n      });\n    },\n    autoUpdateModel: function autoUpdateModel() {\n      if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption) {\n        this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n        this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n      }\n    },\n    updateModel: function updateModel(event, value) {\n      this.$emit('update:modelValue', value);\n      this.$emit('change', {\n        originalEvent: event,\n        value: value\n      });\n    },\n    flatOptions: function flatOptions(options) {\n      var _this14 = this;\n      return (options || []).reduce(function (result, option, index) {\n        result.push({\n          optionGroup: option,\n          group: true,\n          index: index\n        });\n        var optionGroupChildren = _this14.getOptionGroupChildren(option);\n        optionGroupChildren && optionGroupChildren.forEach(function (o) {\n          return result.push(o);\n        });\n        return result;\n      }, []);\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    },\n    listRef: function listRef(el, contentRef) {\n      this.list = el;\n      contentRef && contentRef(el); // For VirtualScroller\n    },\n    virtualScrollerRef: function virtualScrollerRef(el) {\n      this.virtualScroller = el;\n    }\n  },\n  computed: {\n    visibleOptions: function visibleOptions() {\n      var _this15 = this;\n      var options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n      if (this.filterValue) {\n        var filteredOptions = FilterService.filter(options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n        if (this.optionGroupLabel) {\n          var optionGroups = this.options || [];\n          var filtered = [];\n          optionGroups.forEach(function (group) {\n            var groupChildren = _this15.getOptionGroupChildren(group);\n            var filteredItems = groupChildren.filter(function (item) {\n              return filteredOptions.includes(item);\n            });\n            if (filteredItems.length > 0) filtered.push(_objectSpread(_objectSpread({}, group), {}, _defineProperty({}, typeof _this15.optionGroupChildren === 'string' ? _this15.optionGroupChildren : 'items', _toConsumableArray(filteredItems))));\n          });\n          return this.flatOptions(filtered);\n        }\n        return filteredOptions;\n      }\n      return options;\n    },\n    hasSelectedOption: function hasSelectedOption() {\n      return isNotEmpty(this.modelValue);\n    },\n    label: function label() {\n      var selectedOptionIndex = this.findSelectedOptionIndex();\n      return selectedOptionIndex !== -1 ? this.getOptionLabel(this.visibleOptions[selectedOptionIndex]) : this.placeholder || 'p-emptylabel';\n    },\n    editableInputValue: function editableInputValue() {\n      var selectedOptionIndex = this.findSelectedOptionIndex();\n      return selectedOptionIndex !== -1 ? this.getOptionLabel(this.visibleOptions[selectedOptionIndex]) : this.modelValue || '';\n    },\n    equalityKey: function equalityKey() {\n      return this.optionValue ? null : this.dataKey;\n    },\n    searchFields: function searchFields() {\n      return this.filterFields || [this.optionLabel];\n    },\n    filterResultMessageText: function filterResultMessageText() {\n      return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n    },\n    filterMessageText: function filterMessageText() {\n      return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n    },\n    emptyFilterMessageText: function emptyFilterMessageText() {\n      return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n    },\n    emptyMessageText: function emptyMessageText() {\n      return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n    },\n    selectionMessageText: function selectionMessageText() {\n      return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n    },\n    emptySelectionMessageText: function emptySelectionMessageText() {\n      return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n    },\n    selectedMessageText: function selectedMessageText() {\n      return this.hasSelectedOption ? this.selectionMessageText.replaceAll('{0}', '1') : this.emptySelectionMessageText;\n    },\n    focusedOptionId: function focusedOptionId() {\n      return this.focusedOptionIndex !== -1 ? \"\".concat(this.id, \"_\").concat(this.focusedOptionIndex) : null;\n    },\n    ariaSetSize: function ariaSetSize() {\n      var _this16 = this;\n      return this.visibleOptions.filter(function (option) {\n        return !_this16.isOptionGroup(option);\n      }).length;\n    },\n    virtualScrollerDisabled: function virtualScrollerDisabled() {\n      return !this.virtualScrollerOptions;\n    }\n  },\n  directives: {\n    ripple: Ripple\n  },\n  components: {\n    InputText: InputText,\n    VirtualScroller: VirtualScroller,\n    Portal: Portal,\n    InputIcon: InputIcon,\n    IconField: IconField,\n    TimesIcon: TimesIcon,\n    ChevronDownIcon: ChevronDownIcon,\n    SpinnerIcon: SpinnerIcon,\n    SearchIcon: SearchIcon,\n    CheckIcon: CheckIcon,\n    BlankIcon: BlankIcon\n  }\n};\nvar _hoisted_1 = [\"id\"];\nvar _hoisted_2 = [\"id\", \"value\", \"placeholder\", \"tabindex\", \"disabled\", \"aria-label\", \"aria-labelledby\", \"aria-expanded\", \"aria-controls\", \"aria-activedescendant\", \"aria-invalid\"];\nvar _hoisted_3 = [\"id\", \"tabindex\", \"aria-label\", \"aria-labelledby\", \"aria-expanded\", \"aria-controls\", \"aria-activedescendant\", \"aria-disabled\"];\nvar _hoisted_4 = [\"id\"];\nvar _hoisted_5 = [\"id\"];\nvar _hoisted_6 = [\"id\", \"aria-label\", \"aria-selected\", \"aria-disabled\", \"aria-setsize\", \"aria-posinset\", \"onClick\", \"onMousemove\", \"data-p-selected\", \"data-p-focused\", \"data-p-disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_InputText = resolveComponent(\"InputText\");\n  var _component_SearchIcon = resolveComponent(\"SearchIcon\");\n  var _component_InputIcon = resolveComponent(\"InputIcon\");\n  var _component_IconField = resolveComponent(\"IconField\");\n  var _component_CheckIcon = resolveComponent(\"CheckIcon\");\n  var _component_BlankIcon = resolveComponent(\"BlankIcon\");\n  var _component_VirtualScroller = resolveComponent(\"VirtualScroller\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    id: $data.id,\n    \"class\": _ctx.cx('root'),\n    onClick: _cache[11] || (_cache[11] = function () {\n      return $options.onContainerClick && $options.onContainerClick.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [_ctx.editable ? (openBlock(), createElementBlock(\"input\", mergeProps({\n    key: 0,\n    ref: \"focusInput\",\n    id: _ctx.labelId || _ctx.inputId,\n    type: \"text\",\n    \"class\": [_ctx.cx('label'), _ctx.inputClass, _ctx.labelClass],\n    style: [_ctx.inputStyle, _ctx.labelStyle],\n    value: $options.editableInputValue,\n    placeholder: _ctx.placeholder,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    disabled: _ctx.disabled,\n    autocomplete: \"off\",\n    role: \"combobox\",\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $data.id + '_list',\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    onInput: _cache[3] || (_cache[3] = function () {\n      return $options.onEditableInput && $options.onEditableInput.apply($options, arguments);\n    })\n  }, _ctx.ptm('label')), null, 16, _hoisted_2)) : (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 1,\n    ref: \"focusInput\",\n    id: _ctx.labelId || _ctx.inputId,\n    \"class\": [_ctx.cx('label'), _ctx.inputClass, _ctx.labelClass],\n    style: [_ctx.inputStyle, _ctx.labelStyle],\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    role: \"combobox\",\n    \"aria-label\": _ctx.ariaLabel || ($options.label === 'p-emptylabel' ? undefined : $options.label),\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $data.id + '_list',\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    \"aria-disabled\": _ctx.disabled,\n    onFocus: _cache[4] || (_cache[4] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[5] || (_cache[5] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[6] || (_cache[6] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    })\n  }, _ctx.ptm('label')), [renderSlot(_ctx.$slots, \"value\", {\n    value: _ctx.modelValue,\n    placeholder: _ctx.placeholder\n  }, function () {\n    return [createTextVNode(toDisplayString($options.label === 'p-emptylabel' ? ' ' : $options.label || 'empty'), 1)];\n  })], 16, _hoisted_3)), _ctx.showClear && _ctx.modelValue != null ? renderSlot(_ctx.$slots, \"clearicon\", {\n    key: 2,\n    \"class\": normalizeClass(_ctx.cx('clearIcon')),\n    clearCallback: $options.onClearClick\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon ? 'i' : 'TimesIcon'), mergeProps({\n      ref: \"clearIcon\",\n      \"class\": [_ctx.cx('clearIcon'), _ctx.clearIcon],\n      onClick: $options.onClearClick\n    }, _ctx.ptm('clearIcon'), {\n      \"data-pc-section\": \"clearicon\"\n    }), null, 16, [\"class\", \"onClick\"]))];\n  }) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('dropdown')\n  }, _ctx.ptm('dropdown')), [_ctx.loading ? renderSlot(_ctx.$slots, \"loadingicon\", {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('loadingIcon'))\n  }, function () {\n    return [_ctx.loadingIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 0,\n      \"class\": [_ctx.cx('loadingIcon'), 'pi-spin', _ctx.loadingIcon],\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('loadingIcon')), null, 16)) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n      key: 1,\n      \"class\": _ctx.cx('loadingIcon'),\n      spin: \"\",\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('loadingIcon')), null, 16, [\"class\"]))];\n  }) : renderSlot(_ctx.$slots, \"dropdownicon\", {\n    key: 1,\n    \"class\": normalizeClass(_ctx.cx('dropdownIcon'))\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.dropdownIcon ? 'span' : 'ChevronDownIcon'), mergeProps({\n      \"class\": [_ctx.cx('dropdownIcon'), _ctx.dropdownIcon],\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('dropdownIcon')), null, 16, [\"class\"]))];\n  })], 16), createVNode(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onAfterEnter: $options.onOverlayAfterEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            \"class\": [_ctx.cx('overlay'), _ctx.panelClass, _ctx.overlayClass],\n            style: [_ctx.panelStyle, _ctx.overlayStyle],\n            onClick: _cache[9] || (_cache[9] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            onKeydown: _cache[10] || (_cache[10] = function () {\n              return $options.onOverlayKeyDown && $options.onOverlayKeyDown.apply($options, arguments);\n            })\n          }, _ctx.ptm('overlay')), [createElementVNode(\"span\", mergeProps({\n            ref: \"firstHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"aria-hidden\": \"true\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[7] || (_cache[7] = function () {\n              return $options.onFirstHiddenFocus && $options.onFirstHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenFirstFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16), renderSlot(_ctx.$slots, \"header\", {\n            value: _ctx.modelValue,\n            options: $options.visibleOptions\n          }), _ctx.filter ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            \"class\": _ctx.cx('header')\n          }, _ctx.ptm('header')), [createVNode(_component_IconField, mergeProps({\n            unstyled: _ctx.unstyled\n          }, _ctx.ptm('pcFilterContainer')), {\n            \"default\": withCtx(function () {\n              return [createVNode(_component_InputText, {\n                ref: \"filterInput\",\n                type: \"text\",\n                value: $data.filterValue,\n                onVnodeMounted: $options.onFilterUpdated,\n                onVnodeUpdated: $options.onFilterUpdated,\n                \"class\": normalizeClass(_ctx.cx('pcFilter')),\n                placeholder: _ctx.filterPlaceholder,\n                variant: _ctx.variant,\n                unstyled: _ctx.unstyled,\n                role: \"searchbox\",\n                autocomplete: \"off\",\n                \"aria-owns\": $data.id + '_list',\n                \"aria-activedescendant\": $options.focusedOptionId,\n                onKeydown: $options.onFilterKeyDown,\n                onBlur: $options.onFilterBlur,\n                onInput: $options.onFilterChange,\n                pt: _ctx.ptm('pcFilter')\n              }, null, 8, [\"value\", \"onVnodeMounted\", \"onVnodeUpdated\", \"class\", \"placeholder\", \"variant\", \"unstyled\", \"aria-owns\", \"aria-activedescendant\", \"onKeydown\", \"onBlur\", \"onInput\", \"pt\"]), createVNode(_component_InputIcon, mergeProps({\n                unstyled: _ctx.unstyled\n              }, _ctx.ptm('pcFilterIconContainer')), {\n                \"default\": withCtx(function () {\n                  return [renderSlot(_ctx.$slots, \"filtericon\", {}, function () {\n                    return [_ctx.filterIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n                      key: 0,\n                      \"class\": _ctx.filterIcon\n                    }, _ctx.ptm('filterIcon')), null, 16)) : (openBlock(), createBlock(_component_SearchIcon, normalizeProps(mergeProps({\n                      key: 1\n                    }, _ctx.ptm('filterIcon'))), null, 16))];\n                  })];\n                }),\n                _: 3\n              }, 16, [\"unstyled\"])];\n            }),\n            _: 3\n          }, 16, [\"unstyled\"]), createElementVNode(\"span\", mergeProps({\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            \"class\": \"p-hidden-accessible\"\n          }, _ctx.ptm('hiddenFilterResult'), {\n            \"data-p-hidden-accessible\": true\n          }), toDisplayString($options.filterResultMessageText), 17)], 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('listContainer'),\n            style: {\n              'max-height': $options.virtualScrollerDisabled ? _ctx.scrollHeight : ''\n            }\n          }, _ctx.ptm('listContainer')), [createVNode(_component_VirtualScroller, mergeProps({\n            ref: $options.virtualScrollerRef\n          }, _ctx.virtualScrollerOptions, {\n            items: $options.visibleOptions,\n            style: {\n              height: _ctx.scrollHeight\n            },\n            tabindex: -1,\n            disabled: $options.virtualScrollerDisabled,\n            pt: _ctx.ptm('virtualScroller')\n          }), createSlots({\n            content: withCtx(function (_ref) {\n              var styleClass = _ref.styleClass,\n                contentRef = _ref.contentRef,\n                items = _ref.items,\n                getItemOptions = _ref.getItemOptions,\n                contentStyle = _ref.contentStyle,\n                itemSize = _ref.itemSize;\n              return [createElementVNode(\"ul\", mergeProps({\n                ref: function ref(el) {\n                  return $options.listRef(el, contentRef);\n                },\n                id: $data.id + '_list',\n                \"class\": [_ctx.cx('list'), styleClass],\n                style: contentStyle,\n                role: \"listbox\"\n              }, _ctx.ptm('list')), [(openBlock(true), createElementBlock(Fragment, null, renderList(items, function (option, i) {\n                return openBlock(), createElementBlock(Fragment, {\n                  key: $options.getOptionRenderKey(option, $options.getOptionIndex(i, getItemOptions))\n                }, [$options.isOptionGroup(option) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                  key: 0,\n                  id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n                  style: {\n                    height: itemSize ? itemSize + 'px' : undefined\n                  },\n                  \"class\": _ctx.cx('optionGroup'),\n                  role: \"option\",\n                  ref_for: true\n                }, _ctx.ptm('optionGroup')), [renderSlot(_ctx.$slots, \"optiongroup\", {\n                  option: option.optionGroup,\n                  index: $options.getOptionIndex(i, getItemOptions)\n                }, function () {\n                  return [createElementVNode(\"span\", mergeProps({\n                    \"class\": _ctx.cx('optionGroupLabel'),\n                    ref_for: true\n                  }, _ctx.ptm('optionGroupLabel')), toDisplayString($options.getOptionGroupLabel(option.optionGroup)), 17)];\n                })], 16, _hoisted_5)) : withDirectives((openBlock(), createElementBlock(\"li\", mergeProps({\n                  key: 1,\n                  id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n                  \"class\": _ctx.cx('option', {\n                    option: option,\n                    focusedOption: $options.getOptionIndex(i, getItemOptions)\n                  }),\n                  style: {\n                    height: itemSize ? itemSize + 'px' : undefined\n                  },\n                  role: \"option\",\n                  \"aria-label\": $options.getOptionLabel(option),\n                  \"aria-selected\": $options.isSelected(option),\n                  \"aria-disabled\": $options.isOptionDisabled(option),\n                  \"aria-setsize\": $options.ariaSetSize,\n                  \"aria-posinset\": $options.getAriaPosInset($options.getOptionIndex(i, getItemOptions)),\n                  onClick: function onClick($event) {\n                    return $options.onOptionSelect($event, option);\n                  },\n                  onMousemove: function onMousemove($event) {\n                    return $options.onOptionMouseMove($event, $options.getOptionIndex(i, getItemOptions));\n                  },\n                  \"data-p-selected\": $options.isSelected(option),\n                  \"data-p-focused\": $data.focusedOptionIndex === $options.getOptionIndex(i, getItemOptions),\n                  \"data-p-disabled\": $options.isOptionDisabled(option),\n                  ref_for: true\n                }, $options.getPTItemOptions(option, getItemOptions, i, 'option')), [_ctx.checkmark ? (openBlock(), createElementBlock(Fragment, {\n                  key: 0\n                }, [$options.isSelected(option) ? (openBlock(), createBlock(_component_CheckIcon, mergeProps({\n                  key: 0,\n                  \"class\": _ctx.cx('optionCheckIcon'),\n                  ref_for: true\n                }, _ctx.ptm('optionCheckIcon')), null, 16, [\"class\"])) : (openBlock(), createBlock(_component_BlankIcon, mergeProps({\n                  key: 1,\n                  \"class\": _ctx.cx('optionBlankIcon'),\n                  ref_for: true\n                }, _ctx.ptm('optionBlankIcon')), null, 16, [\"class\"]))], 64)) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, \"option\", {\n                  option: option,\n                  selected: $options.isSelected(option),\n                  index: $options.getOptionIndex(i, getItemOptions)\n                }, function () {\n                  return [createElementVNode(\"span\", mergeProps({\n                    \"class\": _ctx.cx('optionLabel'),\n                    ref_for: true\n                  }, _ctx.ptm('optionLabel')), toDisplayString($options.getOptionLabel(option)), 17)];\n                })], 16, _hoisted_6)), [[_directive_ripple]])], 64);\n              }), 128)), $data.filterValue && (!items || items && items.length === 0) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                key: 0,\n                \"class\": _ctx.cx('emptyMessage'),\n                role: \"option\"\n              }, _ctx.ptm('emptyMessage'), {\n                \"data-p-hidden-accessible\": true\n              }), [renderSlot(_ctx.$slots, \"emptyfilter\", {}, function () {\n                return [createTextVNode(toDisplayString($options.emptyFilterMessageText), 1)];\n              })], 16)) : !_ctx.options || _ctx.options && _ctx.options.length === 0 ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                key: 1,\n                \"class\": _ctx.cx('emptyMessage'),\n                role: \"option\"\n              }, _ctx.ptm('emptyMessage'), {\n                \"data-p-hidden-accessible\": true\n              }), [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n                return [createTextVNode(toDisplayString($options.emptyMessageText), 1)];\n              })], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_4)];\n            }),\n            _: 2\n          }, [_ctx.$slots.loader ? {\n            name: \"loader\",\n            fn: withCtx(function (_ref2) {\n              var options = _ref2.options;\n              return [renderSlot(_ctx.$slots, \"loader\", {\n                options: options\n              })];\n            }),\n            key: \"0\"\n          } : undefined]), 1040, [\"items\", \"style\", \"disabled\", \"pt\"])], 16), renderSlot(_ctx.$slots, \"footer\", {\n            value: _ctx.modelValue,\n            options: $options.visibleOptions\n          }), !_ctx.options || _ctx.options && _ctx.options.length === 0 ? (openBlock(), createElementBlock(\"span\", mergeProps({\n            key: 1,\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            \"class\": \"p-hidden-accessible\"\n          }, _ctx.ptm('hiddenEmptyMessage'), {\n            \"data-p-hidden-accessible\": true\n          }), toDisplayString($options.emptyMessageText), 17)) : createCommentVNode(\"\", true), createElementVNode(\"span\", mergeProps({\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            \"class\": \"p-hidden-accessible\"\n          }, _ctx.ptm('hiddenSelectedMessage'), {\n            \"data-p-hidden-accessible\": true\n          }), toDisplayString($options.selectedMessageText), 17), createElementVNode(\"span\", mergeProps({\n            ref: \"lastHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"aria-hidden\": \"true\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[8] || (_cache[8] = function () {\n              return $options.onLastHiddenFocus && $options.onLastHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenLastFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16)], 16)) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"])], 16, _hoisted_1);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","modelValue","options","Array","optionLabel","String","Function","optionValue","optionDisabled","optionGroupLabel","optionGroupChildren","scrollHeight","type","filter","Boolean","filterPlaceholder","filterLocale","filterMatchMode","filterFields","editable","placeholder","variant","invalid","disabled","dataKey","showClear","fluid","inputId","inputClass","Object","inputStyle","labelId","labelClass","labelStyle","panelClass","overlayStyle","overlayClass","panelStyle","appendTo","loading","clearIcon","undefined","dropdownIcon","filterIcon","loadingIcon","resetFilterOnHide","resetFilterOnClear","virtualScrollerOptions","autoOptionFocus","autoFilterFocus","selectOnFocus","focusOnHover","highlightOnSelect","checkmark","filterMessage","selectionMessage","emptySelectionMessage","emptyFilterMessage","emptyMessage","tabindex","Number","ariaLabel","ariaLabelledby","style","SelectStyle","provide","$pcSelect","$parentInstance","script","inheritAttrs","emits","outsideClickListener","scrollHandler","resizeListener","labelClickListener","overlay","list","virtualScroller","searchTimeout","searchValue","isModelValueChanged","data","id","$attrs","clicked","focused","focusedOptionIndex","filterValue","overlayVisible","watch","$attrsId","newValue","UniqueComponentId","autoUpdateModel","mounted","bindLabelClickListener","updated","scrollInView","findSelectedOptionIndex","beforeUnmount","unbindOutsideClickListener","unbindResizeListener","unbindLabelClickListener","destroy","ZIndex","clear","methods","getOptionIndex","index","fn","virtualScrollerDisabled","getOptionLabel","option","resolveFieldData","getOptionValue","getOptionRenderKey","getPTItemOptions","itemOptions","key","ptm","context","selected","isSelected","isOptionDisabled","isOptionGroup","optionGroup","group","getOptionGroupLabel","getOptionGroupChildren","getAriaPosInset","_this","visibleOptions","slice","length","show","isFocus","$emit","findFirstFocusedOptionIndex","focus","$refs","focusInput","hide","_this2","_hide","setTimeout","onFocus","event","onBlur","onKeyDown","isAndroid","preventDefault","metaKey","ctrlKey","code","onArrowDownKey","onArrowUpKey","onArrowLeftKey","onHomeKey","onEndKey","onPageDownKey","onPageUpKey","onSpaceKey","onEnterKey","onEscapeKey","onTabKey","onBackspaceKey","isPrintableCharacter","searchOptions","onEditableInput","value","target","matched","updateModel","isNotEmpty","onContainerClick","tagName","getAttribute","closest","contains","onClearClick","onFirstHiddenFocus","focusableEl","relatedTarget","getFirstFocusableElement","onLastHiddenFocus","getLastFocusableElement","onOptionSelect","isHide","arguments","onOptionMouseMove","changeFocusedOptionIndex","onFilterChange","originalEvent","scrollToIndex","onFilterKeyDown","onFilterBlur","onFilterUpdated","alignOverlay","onOverlayClick","OverlayEventBus","emit","$el","onOverlayKeyDown","optionIndex","findNextOptionIndex","findFirstOptionIndex","pressedInInputText","altKey","findPrevOptionIndex","findLastOptionIndex","findLastFocusedOptionIndex","currentTarget","shiftKey","setSelectionRange","selectionStart","len","stopPropagation","hasFocusableElements","firstHiddenFocusableElementOnOverlay","onOverlayEnter","el","set","$primevue","config","zIndex","addStyle","position","top","left","filterInput","onOverlayAfterEnter","bindOutsideClickListener","bindScrollListener","bindResizeListener","onOverlayLeave","unbindScrollListener","onOverlayAfterLeave","relativePosition","minWidth","getOuterWidth","absolutePosition","_this3","document","addEventListener","removeEventListener","_this4","ConnectedOverlayScrollHandler","container","_this5","isTouchDevice","window","_this6","label","querySelector","concat","isVisible","getFocusableElements","isOptionMatched","_this$getOptionLabel","isValidOption","toLocaleLowerCase","startsWith","isValidSelectedOption","equals","equalityKey","_this7","findIndex","_this8","findLastIndex","_this9","matchedOptionIndex","_this10","_this11","hasSelectedOption","selectedIndex","_char","_this12","clearTimeout","_this13","$nextTick","focusedOptionId","element","findSingle","scrollIntoView","block","inline","flatOptions","_this14","reduce","result","push","forEach","o","overlayRef","listRef","contentRef","virtualScrollerRef","computed","_this15","filteredOptions","FilterService","searchFields","optionGroups","filtered","groupChildren","filteredItems","item","includes","_objectSpread","_defineProperty","_toConsumableArray","selectedOptionIndex","editableInputValue","filterResultMessageText","filterMessageText","replaceAll","emptyFilterMessageText","locale","searchMessage","emptySearchMessage","emptyMessageText","selectionMessageText","emptySelectionMessageText","selectedMessageText","ariaSetSize","_this16","directives","ripple","Ripple","components","InputText","VirtualScroller","Portal","InputIcon","IconField","TimesIcon","ChevronDownIcon","SpinnerIcon","SearchIcon","CheckIcon","BlankIcon","openBlock","createElementBlock","mergeProps","ref","$data","_ctx","cx","onClick","_cache","$options","apply","ptmi","autocomplete","role","onKeydown","onInput","_hoisted_2","renderSlot","$slots","createTextVNode","toDisplayString","normalizeClass","clearCallback","createBlock","resolveDynamicComponent","createElementVNode","_component_SpinnerIcon","spin","createVNode","_component_Portal","Transition","onEnter","onAfterEnter","onLeave","onAfterLeave","_component_IconField","unstyled","_component_InputText","onVnodeMounted","onVnodeUpdated","pt","_component_InputIcon","_component_SearchIcon","normalizeProps","createCommentVNode","_component_VirtualScroller","items","content","withCtx","_ref","styleClass","getItemOptions","contentStyle","itemSize","Fragment","renderList","i","height","withDirectives","$event","onMousemove","_component_CheckIcon","_component_BlankIcon","loader","_ref2"],"sources":["../../src/select/BaseSelect.vue","../../src/select/Select.vue","../../src/select/Select.vue?vue&type=template&id=6f9142bb&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SelectStyle from 'primevue/select/style';\n\nexport default {\n    name: 'BaseSelect',\n    extends: BaseComponent,\n    props: {\n        modelValue: null,\n        options: Array,\n        optionLabel: [String, Function],\n        optionValue: [String, Function],\n        optionDisabled: [String, Function],\n        optionGroupLabel: [String, Function],\n        optionGroupChildren: [String, Function],\n        scrollHeight: {\n            type: String,\n            default: '14rem'\n        },\n        filter: Boolean,\n        filterPlaceholder: String,\n        filterLocale: String,\n        filterMatchMode: {\n            type: String,\n            default: 'contains'\n        },\n        filterFields: {\n            type: Array,\n            default: null\n        },\n        editable: Boolean,\n        placeholder: {\n            type: String,\n            default: null\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        dataKey: null,\n        showClear: {\n            type: Boolean,\n            default: false\n        },\n        fluid: {\n            type: Boolean,\n            default: false\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        labelId: {\n            type: String,\n            default: null\n        },\n        labelClass: {\n            type: [String, Object],\n            default: null\n        },\n        labelStyle: {\n            type: Object,\n            default: null\n        },\n        panelClass: {\n            type: [String, Object],\n            default: null\n        },\n        overlayStyle: {\n            type: Object,\n            default: null\n        },\n        overlayClass: {\n            type: [String, Object],\n            default: null\n        },\n        panelStyle: {\n            type: Object,\n            default: null\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        clearIcon: {\n            type: String,\n            default: undefined\n        },\n        dropdownIcon: {\n            type: String,\n            default: undefined\n        },\n        filterIcon: {\n            type: String,\n            default: undefined\n        },\n        loadingIcon: {\n            type: String,\n            default: undefined\n        },\n        resetFilterOnHide: {\n            type: Boolean,\n            default: false\n        },\n        resetFilterOnClear: {\n            type: Boolean,\n            default: false\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        autoOptionFocus: {\n            type: Boolean,\n            default: false\n        },\n        autoFilterFocus: {\n            type: Boolean,\n            default: false\n        },\n        selectOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        focusOnHover: {\n            type: Boolean,\n            default: true\n        },\n        highlightOnSelect: {\n            type: Boolean,\n            default: true\n        },\n        checkmark: {\n            type: Boolean,\n            default: false\n        },\n        filterMessage: {\n            type: String,\n            default: null\n        },\n        selectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySelectionMessage: {\n            type: String,\n            default: null\n        },\n        emptyFilterMessage: {\n            type: String,\n            default: null\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        }\n    },\n    style: SelectStyle,\n    provide() {\n        return {\n            $pcSelect: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :id=\"id\" :class=\"cx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <input\n            v-if=\"editable\"\n            ref=\"focusInput\"\n            :id=\"labelId || inputId\"\n            type=\"text\"\n            :class=\"[cx('label'), inputClass, labelClass]\"\n            :style=\"[inputStyle, labelStyle]\"\n            :value=\"editableInputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :disabled=\"disabled\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"id + '_list'\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            :aria-invalid=\"invalid || undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onEditableInput\"\n            v-bind=\"ptm('label')\"\n        />\n        <span\n            v-else\n            ref=\"focusInput\"\n            :id=\"labelId || inputId\"\n            :class=\"[cx('label'), inputClass, labelClass]\"\n            :style=\"[inputStyle, labelStyle]\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel || (label === 'p-emptylabel' ? undefined : label)\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"id + '_list'\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            :aria-disabled=\"disabled\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            v-bind=\"ptm('label')\"\n        >\n            <slot name=\"value\" :value=\"modelValue\" :placeholder=\"placeholder\">{{ label === 'p-emptylabel' ? '&nbsp;' : label || 'empty' }}</slot>\n        </span>\n        <slot v-if=\"showClear && modelValue != null\" name=\"clearicon\" :class=\"cx('clearIcon')\" :clearCallback=\"onClearClick\">\n            <component :is=\"clearIcon ? 'i' : 'TimesIcon'\" ref=\"clearIcon\" :class=\"[cx('clearIcon'), clearIcon]\" @click=\"onClearClick\" v-bind=\"ptm('clearIcon')\" data-pc-section=\"clearicon\" />\n        </slot>\n        <div :class=\"cx('dropdown')\" v-bind=\"ptm('dropdown')\">\n            <slot v-if=\"loading\" name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                <span v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n                <SpinnerIcon v-else :class=\"cx('loadingIcon')\" spin aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n            </slot>\n            <slot v-else name=\"dropdownicon\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"[cx('dropdownIcon'), dropdownIcon]\" aria-hidden=\"true\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :class=\"[cx('overlay'), panelClass, overlayClass]\" :style=\"[panelStyle, overlayStyle]\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" v-bind=\"ptm('overlay')\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                    <div v-if=\"filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n                        <IconField :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterContainer')\">\n                            <InputText\n                                ref=\"filterInput\"\n                                type=\"text\"\n                                :value=\"filterValue\"\n                                @vue:mounted=\"onFilterUpdated\"\n                                @vue:updated=\"onFilterUpdated\"\n                                :class=\"cx('pcFilter')\"\n                                :placeholder=\"filterPlaceholder\"\n                                :variant=\"variant\"\n                                :unstyled=\"unstyled\"\n                                role=\"searchbox\"\n                                autocomplete=\"off\"\n                                :aria-owns=\"id + '_list'\"\n                                :aria-activedescendant=\"focusedOptionId\"\n                                @keydown=\"onFilterKeyDown\"\n                                @blur=\"onFilterBlur\"\n                                @input=\"onFilterChange\"\n                                :pt=\"ptm('pcFilter')\"\n                            />\n                            <InputIcon :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterIconContainer')\">\n                                <slot name=\"filtericon\">\n                                    <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                                    <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                                </slot>\n                            </InputIcon>\n                        </IconField>\n                        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                            {{ filterResultMessageText }}\n                        </span>\n                    </div>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"{ height: scrollHeight }\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                <span :class=\"cx('optionGroupLabel')\" v-bind=\"ptm('optionGroupLabel')\">{{ getOptionGroupLabel(option.optionGroup) }}</span>\n                                            </slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :class=\"cx('option', { option, focusedOption: getOptionIndex(i, getItemOptions) })\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                            v-bind=\"getPTItemOptions(option, getItemOptions, i, 'option')\"\n                                        >\n                                            <template v-if=\"checkmark\">\n                                                <CheckIcon v-if=\"isSelected(option)\" :class=\"cx('optionCheckIcon')\" v-bind=\"ptm('optionCheckIcon')\" />\n                                                <BlankIcon v-else :class=\"cx('optionBlankIcon')\" v-bind=\"ptm('optionBlankIcon')\" />\n                                            </template>\n                                            <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                <span :class=\"cx('optionLabel')\" v-bind=\"ptm('optionLabel')\">{{ getOptionLabel(option) }}</span>\n                                            </slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\" :data-p-hidden-accessible=\"true\">\n                                        <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                                    </li>\n                                    <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\" :data-p-hidden-accessible=\"true\">\n                                        <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                    <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ emptyMessageText }}\n                    </span>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { FilterService } from '@primevue/core/api';\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport { focus, isAndroid, getFirstFocusableElement, getLastFocusableElement, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice, isVisible, getFocusableElements, findSingle } from '@primeuix/utils/dom';\nimport { resolveFieldData, isPrintableCharacter, isNotEmpty, equals, findLastIndex } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport BlankIcon from '@primevue/icons/blank';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport TimesIcon from '@primevue/icons/times';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseSelect from './BaseSelect.vue';\n\nexport default {\n    name: 'Select',\n    extends: BaseSelect,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur', 'before-show', 'before-hide', 'show', 'hide', 'filter'],\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    labelClickListener: null,\n    overlay: null,\n    list: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    searchValue: null,\n    isModelValueChanged: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            filterValue: null,\n            overlayVisible: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        modelValue() {\n            this.isModelValueChanged = true;\n        },\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n        this.bindLabelClickListener();\n    },\n    updated() {\n        if (this.overlayVisible && this.isModelValueChanged) {\n            this.scrollInView(this.findSelectedOptionIndex());\n        }\n\n        this.isModelValueChanged = false;\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n        this.unbindLabelClickListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTItemOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    option,\n                    index,\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex();\n\n            isFocus && focus(this.$refs.focusInput);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n                this.searchValue = '';\n\n                this.resetFilterOnHide && (this.filterValue = null);\n                isFocus && focus(this.$refs.focusInput);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex();\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.disabled || isAndroid()) {\n                event.preventDefault();\n\n                return;\n            }\n\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event, this.editable);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, this.editable);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, this.editable);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, this.editable);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event, this.editable);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event, this.editable);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        !this.overlayVisible && this.show();\n                        !this.editable && this.searchOptions(event, event.key);\n                    }\n\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onEditableInput(event) {\n            const value = event.target.value;\n\n            this.searchValue = '';\n            const matched = this.searchOptions(event, value);\n\n            !matched && (this.focusedOptionIndex = -1);\n\n            this.updateModel(event, value);\n\n            !this.overlayVisible && isNotEmpty(value) && this.show();\n        },\n        onContainerClick(event) {\n            if (this.disabled || this.loading) {\n                return;\n            }\n\n            if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n                return;\n            } else if (!this.overlay || !this.overlay.contains(event.target)) {\n                this.overlayVisible ? this.hide(true) : this.show(true);\n            }\n\n            this.clicked = true;\n        },\n        onClearClick(event) {\n            this.updateModel(event, null);\n            this.resetFilterOnClear && (this.filterValue = null);\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            this.updateModel(event, value);\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onFilterChange(event) {\n            const value = event.target.value;\n\n            this.filterValue = value;\n            this.focusedOptionIndex = -1;\n            this.$emit('filter', { originalEvent: event, value });\n\n            !this.virtualScrollerDisabled && this.virtualScroller.scrollToIndex(0);\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event, true);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event, true);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = -1;\n        },\n        onFilterUpdated() {\n            if (this.overlayVisible) {\n                this.alignOverlay();\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                this.show();\n                this.editable && this.changeFocusedOptionIndex(event, this.findSelectedOptionIndex());\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event, pressedInInputText = false) {\n            if (event.altKey && !pressedInInputText) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                this.changeFocusedOptionIndex(event, this.findFirstOptionIndex());\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                this.changeFocusedOptionIndex(event, this.findLastOptionIndex());\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.overlayVisible) {\n                this.focusedOptionIndex = -1; // reset\n                this.onArrowDownKey(event);\n            } else {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.hide();\n            }\n\n            event.preventDefault();\n        },\n        onSpaceKey(event, pressedInInputText = false) {\n            !pressedInInputText && this.onEnterKey(event);\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n            event.stopPropagation(); //@todo will be changed next versionss\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.overlayVisible && this.hide(this.filter);\n                }\n            }\n        },\n        onBackspaceKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                !this.overlayVisible && this.show();\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.scrollInView();\n\n            this.autoFilterFocus && focus(this.$refs.filterInput.$el);\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n                absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && !this.$el.contains(event.target) && !this.overlay.contains(event.target)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        bindLabelClickListener() {\n            if (!this.editable && !this.labelClickListener) {\n                const label = document.querySelector(`label[for=\"${this.inputId}\"]`);\n\n                if (label && isVisible(label)) {\n                    this.labelClickListener = () => {\n                        focus(this.$refs.focusInput);\n                    };\n\n                    label.addEventListener('click', this.labelClickListener);\n                }\n            }\n        },\n        unbindLabelClickListener() {\n            if (this.labelClickListener) {\n                const label = document.querySelector(`label[for=\"${this.inputId}\"]`);\n\n                if (label && isVisible(label)) {\n                    label.removeEventListener('click', this.labelClickListener);\n                }\n            }\n        },\n        hasFocusableElements() {\n            return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isSelected(option) {\n            return this.isValidOption(option) && equals(this.modelValue, this.getOptionValue(option), this.equalityKey);\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.hasSelectedOption ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let optionIndex = -1;\n            let matched = false;\n\n            if (isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex !== -1) {\n                    matched = true;\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n\n            return matched;\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.$emit('update:modelValue', value);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n\n            if (this.filterValue) {\n                const filteredOptions = FilterService.filter(options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n\n                if (this.optionGroupLabel) {\n                    const optionGroups = this.options || [];\n                    const filtered = [];\n\n                    optionGroups.forEach((group) => {\n                        const groupChildren = this.getOptionGroupChildren(group);\n                        const filteredItems = groupChildren.filter((item) => filteredOptions.includes(item));\n\n                        if (filteredItems.length > 0) filtered.push({ ...group, [typeof this.optionGroupChildren === 'string' ? this.optionGroupChildren : 'items']: [...filteredItems] });\n                    });\n\n                    return this.flatOptions(filtered);\n                }\n\n                return filteredOptions;\n            }\n\n            return options;\n        },\n        hasSelectedOption() {\n            return isNotEmpty(this.modelValue);\n        },\n        label() {\n            const selectedOptionIndex = this.findSelectedOptionIndex();\n\n            return selectedOptionIndex !== -1 ? this.getOptionLabel(this.visibleOptions[selectedOptionIndex]) : this.placeholder || 'p-emptylabel';\n        },\n        editableInputValue() {\n            const selectedOptionIndex = this.findSelectedOptionIndex();\n\n            return selectedOptionIndex !== -1 ? this.getOptionLabel(this.visibleOptions[selectedOptionIndex]) : this.modelValue || '';\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        filterResultMessageText() {\n            return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.hasSelectedOption ? this.selectionMessageText.replaceAll('{0}', '1') : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        InputIcon,\n        IconField,\n        TimesIcon,\n        ChevronDownIcon,\n        SpinnerIcon,\n        SearchIcon,\n        CheckIcon,\n        BlankIcon\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :id=\"id\" :class=\"cx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <input\n            v-if=\"editable\"\n            ref=\"focusInput\"\n            :id=\"labelId || inputId\"\n            type=\"text\"\n            :class=\"[cx('label'), inputClass, labelClass]\"\n            :style=\"[inputStyle, labelStyle]\"\n            :value=\"editableInputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :disabled=\"disabled\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"id + '_list'\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            :aria-invalid=\"invalid || undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onEditableInput\"\n            v-bind=\"ptm('label')\"\n        />\n        <span\n            v-else\n            ref=\"focusInput\"\n            :id=\"labelId || inputId\"\n            :class=\"[cx('label'), inputClass, labelClass]\"\n            :style=\"[inputStyle, labelStyle]\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel || (label === 'p-emptylabel' ? undefined : label)\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"id + '_list'\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            :aria-disabled=\"disabled\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            v-bind=\"ptm('label')\"\n        >\n            <slot name=\"value\" :value=\"modelValue\" :placeholder=\"placeholder\">{{ label === 'p-emptylabel' ? '&nbsp;' : label || 'empty' }}</slot>\n        </span>\n        <slot v-if=\"showClear && modelValue != null\" name=\"clearicon\" :class=\"cx('clearIcon')\" :clearCallback=\"onClearClick\">\n            <component :is=\"clearIcon ? 'i' : 'TimesIcon'\" ref=\"clearIcon\" :class=\"[cx('clearIcon'), clearIcon]\" @click=\"onClearClick\" v-bind=\"ptm('clearIcon')\" data-pc-section=\"clearicon\" />\n        </slot>\n        <div :class=\"cx('dropdown')\" v-bind=\"ptm('dropdown')\">\n            <slot v-if=\"loading\" name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                <span v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n                <SpinnerIcon v-else :class=\"cx('loadingIcon')\" spin aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n            </slot>\n            <slot v-else name=\"dropdownicon\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"[cx('dropdownIcon'), dropdownIcon]\" aria-hidden=\"true\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :class=\"[cx('overlay'), panelClass, overlayClass]\" :style=\"[panelStyle, overlayStyle]\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" v-bind=\"ptm('overlay')\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                    <div v-if=\"filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n                        <IconField :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterContainer')\">\n                            <InputText\n                                ref=\"filterInput\"\n                                type=\"text\"\n                                :value=\"filterValue\"\n                                @vue:mounted=\"onFilterUpdated\"\n                                @vue:updated=\"onFilterUpdated\"\n                                :class=\"cx('pcFilter')\"\n                                :placeholder=\"filterPlaceholder\"\n                                :variant=\"variant\"\n                                :unstyled=\"unstyled\"\n                                role=\"searchbox\"\n                                autocomplete=\"off\"\n                                :aria-owns=\"id + '_list'\"\n                                :aria-activedescendant=\"focusedOptionId\"\n                                @keydown=\"onFilterKeyDown\"\n                                @blur=\"onFilterBlur\"\n                                @input=\"onFilterChange\"\n                                :pt=\"ptm('pcFilter')\"\n                            />\n                            <InputIcon :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterIconContainer')\">\n                                <slot name=\"filtericon\">\n                                    <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                                    <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                                </slot>\n                            </InputIcon>\n                        </IconField>\n                        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                            {{ filterResultMessageText }}\n                        </span>\n                    </div>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"{ height: scrollHeight }\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                <span :class=\"cx('optionGroupLabel')\" v-bind=\"ptm('optionGroupLabel')\">{{ getOptionGroupLabel(option.optionGroup) }}</span>\n                                            </slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :class=\"cx('option', { option, focusedOption: getOptionIndex(i, getItemOptions) })\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                            v-bind=\"getPTItemOptions(option, getItemOptions, i, 'option')\"\n                                        >\n                                            <template v-if=\"checkmark\">\n                                                <CheckIcon v-if=\"isSelected(option)\" :class=\"cx('optionCheckIcon')\" v-bind=\"ptm('optionCheckIcon')\" />\n                                                <BlankIcon v-else :class=\"cx('optionBlankIcon')\" v-bind=\"ptm('optionBlankIcon')\" />\n                                            </template>\n                                            <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                <span :class=\"cx('optionLabel')\" v-bind=\"ptm('optionLabel')\">{{ getOptionLabel(option) }}</span>\n                                            </slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\" :data-p-hidden-accessible=\"true\">\n                                        <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                                    </li>\n                                    <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\" :data-p-hidden-accessible=\"true\">\n                                        <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                    <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ emptyMessageText }}\n                    </span>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { FilterService } from '@primevue/core/api';\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport { focus, isAndroid, getFirstFocusableElement, getLastFocusableElement, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice, isVisible, getFocusableElements, findSingle } from '@primeuix/utils/dom';\nimport { resolveFieldData, isPrintableCharacter, isNotEmpty, equals, findLastIndex } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport BlankIcon from '@primevue/icons/blank';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport TimesIcon from '@primevue/icons/times';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseSelect from './BaseSelect.vue';\n\nexport default {\n    name: 'Select',\n    extends: BaseSelect,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur', 'before-show', 'before-hide', 'show', 'hide', 'filter'],\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    labelClickListener: null,\n    overlay: null,\n    list: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    searchValue: null,\n    isModelValueChanged: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            filterValue: null,\n            overlayVisible: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        modelValue() {\n            this.isModelValueChanged = true;\n        },\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n        this.bindLabelClickListener();\n    },\n    updated() {\n        if (this.overlayVisible && this.isModelValueChanged) {\n            this.scrollInView(this.findSelectedOptionIndex());\n        }\n\n        this.isModelValueChanged = false;\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n        this.unbindLabelClickListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTItemOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    option,\n                    index,\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex();\n\n            isFocus && focus(this.$refs.focusInput);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n                this.searchValue = '';\n\n                this.resetFilterOnHide && (this.filterValue = null);\n                isFocus && focus(this.$refs.focusInput);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex();\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.disabled || isAndroid()) {\n                event.preventDefault();\n\n                return;\n            }\n\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event, this.editable);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, this.editable);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, this.editable);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, this.editable);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event, this.editable);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event, this.editable);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        !this.overlayVisible && this.show();\n                        !this.editable && this.searchOptions(event, event.key);\n                    }\n\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onEditableInput(event) {\n            const value = event.target.value;\n\n            this.searchValue = '';\n            const matched = this.searchOptions(event, value);\n\n            !matched && (this.focusedOptionIndex = -1);\n\n            this.updateModel(event, value);\n\n            !this.overlayVisible && isNotEmpty(value) && this.show();\n        },\n        onContainerClick(event) {\n            if (this.disabled || this.loading) {\n                return;\n            }\n\n            if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n                return;\n            } else if (!this.overlay || !this.overlay.contains(event.target)) {\n                this.overlayVisible ? this.hide(true) : this.show(true);\n            }\n\n            this.clicked = true;\n        },\n        onClearClick(event) {\n            this.updateModel(event, null);\n            this.resetFilterOnClear && (this.filterValue = null);\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            focus(focusableEl);\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            this.updateModel(event, value);\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onFilterChange(event) {\n            const value = event.target.value;\n\n            this.filterValue = value;\n            this.focusedOptionIndex = -1;\n            this.$emit('filter', { originalEvent: event, value });\n\n            !this.virtualScrollerDisabled && this.virtualScroller.scrollToIndex(0);\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event, true);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event, true);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = -1;\n        },\n        onFilterUpdated() {\n            if (this.overlayVisible) {\n                this.alignOverlay();\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                this.show();\n                this.editable && this.changeFocusedOptionIndex(event, this.findSelectedOptionIndex());\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event, pressedInInputText = false) {\n            if (event.altKey && !pressedInInputText) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                this.changeFocusedOptionIndex(event, this.findFirstOptionIndex());\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                this.changeFocusedOptionIndex(event, this.findLastOptionIndex());\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.overlayVisible) {\n                this.focusedOptionIndex = -1; // reset\n                this.onArrowDownKey(event);\n            } else {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.hide();\n            }\n\n            event.preventDefault();\n        },\n        onSpaceKey(event, pressedInInputText = false) {\n            !pressedInInputText && this.onEnterKey(event);\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n            event.stopPropagation(); //@todo will be changed next versionss\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.overlayVisible && this.hide(this.filter);\n                }\n            }\n        },\n        onBackspaceKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                !this.overlayVisible && this.show();\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.scrollInView();\n\n            this.autoFilterFocus && focus(this.$refs.filterInput.$el);\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n                absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && !this.$el.contains(event.target) && !this.overlay.contains(event.target)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        bindLabelClickListener() {\n            if (!this.editable && !this.labelClickListener) {\n                const label = document.querySelector(`label[for=\"${this.inputId}\"]`);\n\n                if (label && isVisible(label)) {\n                    this.labelClickListener = () => {\n                        focus(this.$refs.focusInput);\n                    };\n\n                    label.addEventListener('click', this.labelClickListener);\n                }\n            }\n        },\n        unbindLabelClickListener() {\n            if (this.labelClickListener) {\n                const label = document.querySelector(`label[for=\"${this.inputId}\"]`);\n\n                if (label && isVisible(label)) {\n                    label.removeEventListener('click', this.labelClickListener);\n                }\n            }\n        },\n        hasFocusableElements() {\n            return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isSelected(option) {\n            return this.isValidOption(option) && equals(this.modelValue, this.getOptionValue(option), this.equalityKey);\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.hasSelectedOption ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let optionIndex = -1;\n            let matched = false;\n\n            if (isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex !== -1) {\n                    matched = true;\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n\n            return matched;\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.$emit('update:modelValue', value);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n\n            if (this.filterValue) {\n                const filteredOptions = FilterService.filter(options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n\n                if (this.optionGroupLabel) {\n                    const optionGroups = this.options || [];\n                    const filtered = [];\n\n                    optionGroups.forEach((group) => {\n                        const groupChildren = this.getOptionGroupChildren(group);\n                        const filteredItems = groupChildren.filter((item) => filteredOptions.includes(item));\n\n                        if (filteredItems.length > 0) filtered.push({ ...group, [typeof this.optionGroupChildren === 'string' ? this.optionGroupChildren : 'items']: [...filteredItems] });\n                    });\n\n                    return this.flatOptions(filtered);\n                }\n\n                return filteredOptions;\n            }\n\n            return options;\n        },\n        hasSelectedOption() {\n            return isNotEmpty(this.modelValue);\n        },\n        label() {\n            const selectedOptionIndex = this.findSelectedOptionIndex();\n\n            return selectedOptionIndex !== -1 ? this.getOptionLabel(this.visibleOptions[selectedOptionIndex]) : this.placeholder || 'p-emptylabel';\n        },\n        editableInputValue() {\n            const selectedOptionIndex = this.findSelectedOptionIndex();\n\n            return selectedOptionIndex !== -1 ? this.getOptionLabel(this.visibleOptions[selectedOptionIndex]) : this.modelValue || '';\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        filterResultMessageText() {\n            return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.hasSelectedOption ? this.selectionMessageText.replaceAll('{0}', '1') : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        InputIcon,\n        IconField,\n        TimesIcon,\n        ChevronDownIcon,\n        SpinnerIcon,\n        SearchIcon,\n        CheckIcon,\n        BlankIcon\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}